export async function chatWithGPT(content: string, options: any): Promise<string> {
  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç: ${content}`;

  const apiKey = process.env.NEXT_PUBLIC_OPENROUTER_API_KEY;

  // üí° –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
  if (!apiKey) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç API-–∫–ª—é—á–∞ –¥–ª—è OpenRouter ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ–µ–π–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç");

    // –≠–º—É–ª—è—Ü–∏—è —Ñ–µ–π–∫–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const fakeResponse = {
      averagePricePerSquareMeter: 125000,
      dealCount: Array.isArray(content.transactions) ? content.transactions.length : 10,
    };

    return JSON.stringify(fakeResponse);
  }

  // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫ OpenRouter
  const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: options.model || 'openai/gpt-4',
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
    }),
  });

  const data = await res.json();
  return data.choices[0].message.content.trim();
}

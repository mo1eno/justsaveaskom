
/**
 * ProcessTelegramMessageAction:
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram.
 * –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (whitelist),
 * –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DTO TelegramMessageDto –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
import { TelegramMessageDto } from "../dto/telegram-message.dto";
import { SendTelegramResponseAction } from "./SendTelegramResponseAction";
import { CreateChatGPTRequestAction } from "../../openrouter/actions/CreateChatGPTRequestAction";
import { ProcessChatGPTResponseAction } from "../../openrouter/actions/ProcessChatGPTResponseAction";
import { reportDataCache } from "../utils/ReportDataCache";
export class ProcessTelegramMessageAction {
  private whitelist = new Set([7661449859]);

  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
  private escapeMarkdownV2(text: string): string {
    return text.replace(/[_*\[\]()~`>#+=|{}.!-]/g, '\\$&');
  }

  async execute(message: any): Promise<TelegramMessageDto> {
    // if (!this.whitelist.has(message.from.id)) {
    //   throw new Error("–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ whitelist");
    // }

    /**
     * @todo
     * 1. –ò–∑—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é Telegram API ‚Äî —É–∑–Ω–∞—ë–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º—ã –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
     * 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist (—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫).
     * 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ whitelist, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ. (throw)
     * 4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç TelegramMessageDto.
     */


    // –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    const telegramMessageDto: TelegramMessageDto = {
      messageId: message.message_id,
      chatId: message.chat.id,
      from: {
        id: message.from.id,
        firstName: message.from.first_name,
        lastName: message.from.last_name,
        username: message.from.username,
      },
      text: message.text,
      date: new Date(message.date * 1000),
    };


    // –ó–∞–ø—Ä–æ—Å –∫ GPT
    const chatGptRequest = {
      originalText: telegramMessageDto.text,
      crmDump: JSON.stringify(this.getCrmDump()),
    };

    try {
      const createChatGPTRequestAction = new CreateChatGPTRequestAction();
      const chatGptResponse = await createChatGPTRequestAction.execute(chatGptRequest);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
      const processChatGPTResponseAction = new ProcessChatGPTResponseAction();
      const processedResponse = await processChatGPTResponseAction.execute(chatGptResponse);

      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const priceFormatted = Math.round(processedResponse.averagePricePerSquareMeter).toLocaleString('ru-RU');
      const totalAreaText = processedResponse.dealCount === 1 ? '1 –æ–±—ä–µ–∫—Ç' :
                           processedResponse.dealCount < 5 ? `${processedResponse.dealCount} –æ–±—ä–µ–∫—Ç–∞` :
                           `${processedResponse.dealCount} –æ–±—ä–µ–∫—Ç–æ–≤`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ GPT –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
      let criteriaText = '';
      if (chatGptResponse.filtered_criteria) {
        const criteria = chatGptResponse.filtered_criteria;
        const parts = [];
        if (criteria.type) parts.push(`üè† –¢–∏–ø: ${this.escapeMarkdownV2(criteria.type)}`);
        if (criteria.area_range && (criteria.area_range.min || criteria.area_range.max)) {
          const min = criteria.area_range.min ? `–æ—Ç ${criteria.area_range.min}` : '';
          const max = criteria.area_range.max ? `–¥–æ ${criteria.area_range.max}` : '';
          parts.push(`üìê –ü–ª–æ—â–∞–¥—å: ${this.escapeMarkdownV2(`${min} ${max} –º¬≤`.trim())}`);
        }
        if (criteria.city) parts.push(`üèô –ì–æ—Ä–æ–¥: ${this.escapeMarkdownV2(criteria.city)}`);
        if (criteria.street) parts.push(`üõ£ –£–ª–∏—Ü–∞: ${this.escapeMarkdownV2(criteria.street)}`);
        if (criteria.district) parts.push(`üìç –†–∞–π–æ–Ω: ${this.escapeMarkdownV2(criteria.district)}`);

        if (parts.length > 0) {
          criteriaText = `\n\nüìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n${parts.join('\n')}`;
        }
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç GPT (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
      let additionalInfo = '';
      if (chatGptResponse.message && chatGptResponse.message.trim() && chatGptResponse.message.trim() !== '') {
        additionalInfo = `\n\nüí¨ ${this.escapeMarkdownV2(chatGptResponse.message)}`;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ –∫–µ—à
      const reportId = reportDataCache.store({
        price: Math.round(processedResponse.averagePricePerSquareMeter),
        count: processedResponse.dealCount,
        criteria: chatGptResponse.filtered_criteria
      });

      const responseDto = {
        chatId: telegramMessageDto.chatId,
        text: `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*

üí∞ *–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤:* ${priceFormatted} —Ä—É–±\\.
üìà *–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:* ${totalAreaText}${criteriaText}${additionalInfo}

‚ÑπÔ∏è _–î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ CRM_`,
        parse_mode: 'MarkdownV2',
        reply_markup: {
          inline_keyboard: [[
            {
              text: "üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
              callback_data: `report_${reportId}`
            }
          ]]
        }
      };

      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –¢–ì
      const sendTelegramAction = new SendTelegramResponseAction();
      await sendTelegramAction.execute(responseDto);

    } catch (error) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ ChatGPT:", error);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let errorMessage = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ üôè";

      if (error instanceof Error) {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (error.message.includes("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö") ||
            error.message.includes("–Ω–µ –Ω–∞–π–¥–µ–Ω") ||
            error.message.includes("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å") ||
            error.message.includes("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ") ||
            error.message.includes("–Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏") ||
            error.message.includes("–û–±—ä–µ–∫—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–Ω—ã")) {
          errorMessage = `üìä ${error.message}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.`;
        }
      }

      const responseDto = {
        chatId: telegramMessageDto.chatId,
        text: errorMessage,
      };

      const sendTelegramAction = new SendTelegramResponseAction();
      await sendTelegramAction.execute(responseDto);
    }
    return telegramMessageDto;
  }

  // CRM
  private getCrmDump() {
    return [
      { price_per_sq_meter: 50000 },
      { price_per_sq_meter: 55000 },
      { price_per_sq_meter: 60000 },
    ];
  }
}

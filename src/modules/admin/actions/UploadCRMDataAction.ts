import { UploadFileDto } from "../dto/UploadFileDto";
import fs from "fs/promises";
import path from "path";
import { chatWithGPT } from "../utils/chatWithGPT";
import { trackEvent } from "../../../pages/api/analytics"; // –ø–æ–¥–∫–ª—é—á–∞–µ–º analytics –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞

const UPLOAD_DIR = path.resolve(__dirname, "../../../uploads");

// –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞–π–æ–Ω–∞–º –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞
const DEFAULT_TEST_DATA = {
  transactions: [
    {
      district: "–õ–µ–Ω–∏–Ω—Å–∫–∏–π",
      address: "—É–ª. –°–≤–µ—Ç–ª–∞–Ω—Å–∫–∞—è, 10",
      area: 45.5,
      price: 6300000,
      date: "2023-05-15",
      type: "apartment"
    },
    {
      district: "–õ–µ–Ω–∏–Ω—Å–∫–∏–π",
      address: "—É–ª. –ê–ª–µ—É—Ç—Å–∫–∞—è, 15",
      area: 32.7,
      price: 4905000,
      date: "2023-06-22",
      type: "apartment"
    },
    {
      district: "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π",
      address: "—É–ª. –†—É—Å—Å–∫–∞—è, 25",
      area: 55.0,
      price: 7150000,
      date: "2023-04-10",
      type: "apartment"
    },
    {
      district: "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π",
      address: "—É–ª. –ù–µ–∫—Ä–∞—Å–æ–≤—Å–∫–∞—è, 8",
      area: 48.3,
      price: 6279000,
      date: "2023-07-03",
      type: "apartment"
    },
    {
      district: "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π",
      address: "—É–ª. –û–∫–µ–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 72",
      area: 67.8,
      price: 9492000,
      date: "2023-03-18",
      type: "apartment"
    },
    {
      district: "–ü–µ—Ä–≤–æ—Ä–µ—á–µ–Ω—Å–∫–∏–π",
      address: "—É–ª. –°–∞–±–∞–Ω–µ–µ–≤–∞, 3",
      area: 38.6,
      price: 5404000,
      date: "2023-08-11",
      type: "apartment"
    },
    {
      district: "–ü–µ—Ä–≤–æ—Ä–µ—á–µ–Ω—Å–∫–∏–π",
      address: "—É–ª. –ë–æ—Ä–∏—Å–µ–Ω–∫–æ, 12",
      area: 42.0,
      price: 5880000,
      date: "2023-09-05",
      type: "apartment"
    },
    {
      district: "–°–æ–≤–µ—Ç—Å–∫–∏–π",
      address: "—É–ª. –ö–∞–ø–ª—É–Ω–æ–≤–∞, 7",
      area: 53.2,
      price: 7452000,
      date: "2023-02-28",
      type: "apartment"
    },
    {
      district: "–°–æ–≤–µ—Ç—Å–∫–∏–π",
      address: "—É–ª. –§–∞–¥–µ–µ–≤–∞, 18",
      area: 60.5,
      price: 8470000,
      date: "2023-10-14",
      type: "apartment"
    },
    {
      district: "–°–æ–≤–µ—Ç—Å–∫–∏–π",
      address: "—É–ª. –ù–µ–π–±—É—Ç–∞, 22",
      area: 47.8,
      price: 6692000,
      date: "2023-01-30",
      type: "apartment"
    }
  ]
};

export class UploadCRMDataAction {
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   * @param file –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç GPT
   */
  async execute(file?: UploadFileDto): Promise<any> {
    try {
      let parsed: any;
      
      // –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)
      if (!file) {
        console.log("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        parsed = DEFAULT_TEST_DATA;

        // üìà –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        trackEvent("admin", "using_default_test_data", {
          fileName: "default_test_data.json",
          testDataCount: parsed.transactions.length,
        });
      } 
      // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      else {
        if (typeof file.content === "string") {
          try {
            parsed = JSON.parse(file.content);
          } catch (parseError) {
            throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Å—Ç—Ä–æ–∫–∏");
          }
        } else if (typeof file.content === "object") {
          parsed = file.content;
        } else {
          throw new Error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö");
        }

        // üìà –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        trackEvent("admin", "using_uploaded_data", {
          fileName: file.filename,
          fileSize: file.content.length,
        });
      }

      console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", JSON.stringify(parsed, null, 2));

      if (!parsed || typeof parsed !== "object" || !parsed.transactions) {
        throw new Error("–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ transactions");
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (file) {
        await fs.mkdir(UPLOAD_DIR, { recursive: true });
        const filePath = path.join(UPLOAD_DIR, file.filename);
        await fs.writeFile(filePath, JSON.stringify(parsed, null, 2), "utf-8");
        console.log(`–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);

        // üìà –¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        trackEvent("admin", "file_saved", {
          filePath: filePath,
          fileName: file.filename,
        });
      }

      const prompt = `...`; // –í–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π prompt –¥–ª—è GPT

      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ GPT...");

      let gptResponse;
      try {
        gptResponse = await chatWithGPT(parsed, prompt);
      } catch (gptError) {
        console.error("–û—à–∏–±–∫–∞ GPT:", gptError);
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö");
      }

      console.log("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:", gptResponse);

      // üìà –¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
      trackEvent("admin", "gpt_analysis_complete", {
        result: gptResponse,
        transactionCount: parsed.transactions.length,
      });

      return typeof gptResponse === "string" ? JSON.parse(gptResponse) : gptResponse;

    } catch (error: unknown) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);

      // üìà –¢—Ä–µ–∫–∏–Ω–≥ –æ—à–∏–±–æ–∫
      trackEvent("admin", "crm_processing_error", {
        errorMessage: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      });

      throw error instanceof Error 
        ? error 
        : new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö");
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
   */
  async testAnalysis() {
    return this.execute();
  }
}
